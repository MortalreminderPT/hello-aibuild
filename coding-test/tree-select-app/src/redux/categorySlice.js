import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

/**
 * An async thunk action to fetch categories from the server.
 * This function sends a GET request to the server at 'http://localhost:8080/categories'.
 * It returns the data as a payload if the request is successful.
 */
export const fetchCategoriesHook = createAsyncThunk('categories/fetchCategories', async () => {
  const response = await fetch('http://localhost:8080/categories');
  const data = await response.json();
  return data;
});

/**
 * A slice of the Redux store that manages the state for categories.
 * The slice includes both synchronous and asynchronous actions.
 *
 * @property {Object} initialState - The initial state of the categories slice.
 * @property {Array} initialState.categories - The array to store fetched categories.
 * @property {String} initialState.tip - A string message to guide the user on actions.
 * @property {Boolean} initialState.loading - A boolean flag to indicate if data is being fetched.
 * @property {String|null} initialState.error - A string to store error messages, or null if no error exists.
 */
const categorySlice = createSlice({
  name: 'categories',
  initialState: {
    categories: [],
    tip: "Press the button to fetch categories.",
    loading: false,
    error: null,
  },
  reducers: {
    /**
     * A reducer to handle successful fetching of categories using Saga.
     * Updates the state with the fetched categories and resets loading and error states.
     */
    fetchCategoriesSuccess: (state, action) => {
      state.categories = action.payload;
      state.tip = "You fetched with Saga!";
      state.loading = false;
      state.error = null;
    },
    fetchCategoriesFailure: (state, action) => {
      state.error = "Error: request rejected";
      state.loading = false;
    },
    setLoading: (state, action) => {
      state.loading = action.payload;
    },
  },
  extraReducers: (builder) => {
    /**
     * Handles the pending state when fetchCategoriesHook is dispatched.
     */
    builder
      .addCase(fetchCategoriesHook.pending, (state) => {
        console.log(state);
        state.loading = true;
      })
      .addCase(fetchCategoriesHook.fulfilled, (state, action) => {
        state.categories = action.payload;
        state.tip = "You fetched with Hook!";
        state.loading = false;
      })
      .addCase(fetchCategoriesHook.rejected, (state, action) => {
        state.error = "Error: request rejected";
        state.loading = false;
      });
  },
});

/**
 * Export the reducer function generated by the slice.
 * This will be used to configure the Redux store.
 */
export default categorySlice.reducer;

/**
 * Export the action creators generated by the slice.
 * These will be used to dispatch actions in the application.
 */
export const { fetchCategoriesSuccess, fetchCategoriesFailure, setLoading } = categorySlice.actions;